
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1712] =
    {   0,
        1,  163,    1,  163,  171,  168,  169,  170,    1,  168,
      169,  170,    1,  170,  166,  168,  169,  170,    5,  168,
      169,  170,   57,  168,  169,  170,    6,  168,  169,  170,
        7,  168,  169,  170,  163,  168,  169,  170,  163,  165,
      168,  169,  170,  168,  169,  170,  168,  169,  170,  161,
      163,  168,  169,  170,  161,  163,  168,  169,  170,  164,
      165,  168,  169,  170,  164,  165,  168,  169,  170,  164,
      165,  168,  169,  170,  164,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,

      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,  164,  165,
      168,  169,  170,  164,  165,  168,  169,  170,    1,    5,
      161,  163,  165,  161,  163,  165,  165,  163,    4,  164,

      165,  164,  165,  165,  163,  164,  165,  164,  165,  164,
      164,  164,  165,  164,  165,  164,  165,  164,  165,   71,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,   85,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  108,  164,  165,  164,  165,
      111,  164,  165,  115,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,

      164,  165,  164,  165,  164,  165,  164,  165,  123,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  163,  163,  165,  163,  165,    4,  162,  164,  165,
       59,  164,  165,  164,  164,  164,  164,  164,  164,  164,
      165,  164,  165,   69,  164,  165,  164,  165,  164,  165,

      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
       81,  164,  165,   83,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,   91,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  103,  164,  165,  164,  165,  164,  165,
      164,  165,   33,  164,  165,   34,  164,  165,   35,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,   41,  164,  165,

      164,  165,  164,  165,  164,  165,  119,  164,  165,  164,
      165,  121,  164,  165,  122,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,   43,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  146,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  152,

      164,  165,  153,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  159,  164,  165,
      164,  165,  164,  165,    2,  164,  165,  164,  164,  164,
      164,  164,  164,  164,  164,  165,  164,  165,   70,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,   31,
      164,  165,  164,  165,   32,  164,  165,   75,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,   87,  164,
      165,   88,  164,  165,  164,  165,  164,  165,  164,  165,

      164,  165,  164,  165,  164,  165,  164,  165,   52,  164,
      165,  164,  165,  100,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      107,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,   42,
      164,  165,  164,  165,  164,  165,  164,  165,  120,  164,
      165,  164,  165,  164,  165,  124,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  131,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  136,

      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  142,  164,  165,  143,  164,  165,
      164,  165,  164,  165,    9,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,   30,  164,  165,  164,  165,  156,  164,  165,  164,
      165,  158,  164,  165,  164,  165,  164,  165,    3,    2,
      167,   58,  164,  165,  164,  164,  164,  164,  164,  164,
      164,  164,  165,   68,  164,  165,  164,  165,   56,  164,
      165,   73,  164,  165,  164,  165,   74,  164,  165,   76,

      164,  165,   77,  164,  165,   78,  164,  165,  164,  165,
       53,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,   90,  164,  165,
      164,  165,  164,  165,   95,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,    8,  164,  165,
      164,  165,  102,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,

      165,  126,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  130,  164,  165,  164,  165,  164,  165,  164,
      165,  133,  164,  165,  164,  165,  164,  165,   40,  164,
      165,  164,  165,  164,  165,   39,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  139,  164,  165,  164,
      165,  164,  165,  144,  164,  165,  164,  165,  164,  165,
      147,  164,  165,   47,  148,  164,  165,  164,  165,  164,
      165,  151,  164,  165,  164,  165,  164,  165,  157,  164,
      165,  164,  165,  164,  165,  164,  165,  160,  164,  165,
        3,  167,    2,  167,  164,  164,  164,  164,  164,  164,

      164,  164,  165,   72,  164,  165,   38,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,   84,  164,  165,  164,  165,
       36,  164,  165,  164,  165,   89,  164,  165,  164,  165,
       93,  164,  165,  164,  165,  164,  165,   98,  164,  165,
       99,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  106,  164,  165,  164,  165,  110,  164,  165,  164,
      165,  112,  164,  165,  164,  165,  164,  165,  164,  165,
      116,  164,  165,  117,  164,  165,  164,  165,  118,  164,
      165,   44,  164,  165,  164,  165,  164,  165,  164,  165,

      164,  165,  164,  165,  125,  129,  164,  165,  164,  165,
      164,  165,  164,  165,  132,  164,  165,  135,  164,  165,
      164,  165,  164,  165,  137,  164,  165,  164,  165,  138,
      164,  165,   37,  164,  165,   46,  164,  165,  140,  164,
      165,  164,  165,   50,  164,  165,  164,  165,  164,  165,
      149,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  167,
      164,   61,  164,  164,  164,  164,  164,  164,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,   80,  164,  165,   82,  164,  165,  164,  165,

       86,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,   49,  164,  165,  101,  164,  165,  104,
      164,  165,  164,  165,  164,  165,   29,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  127,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,   51,  164,  165,  164,
      165,  164,  165,  164,  165,   45,  164,  165,  164,  165,
      154,  164,  165,  164,  165,   24,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,   62,  164,  164,
       64,  164,  164,  164,   67,  164,  165,  164,  165,   79,

      164,  165,  164,  165,  164,  165,   13,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,   97,
      164,  165,  164,  165,  105,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,   55,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,  134,  164,
      165,   54,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  150,  164,  165,  155,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,   60,  164,  164,  164,
      164,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,   96,  164,  165,   48,  164,

      165,  164,  165,  164,  165,  114,  164,  165,  164,  165,
       10,  164,  165,  164,  165,  164,  165,  128,  164,  165,
       19,  164,  165,  164,  165,  164,  165,  164,  165,  145,
      164,  165,   28,  164,  165,  164,  165,  164,  165,  164,
      165,  164,   65,  164,  164,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,   92,  164,  165,   94,  164,
      165,  109,  164,  165,  113,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,  164,  164,  164,  165,   12,
      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,

      164,  165,  164,  165,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  164,  165,  164,  165,   63,  164,
      164,   15,  164,  165,  164,  165,  164,  165,  164,  165,
       14,  164,  165,   20,  164,  165,  164,  165,  164,  165,
      164,  165,  164,  165,  141,  164,  165,  164,  165,   26,
      164,  165,   25,  164,  165,   66,  164,   11,  164,  165,
      164,  165,  164,  165,   18,  164,  165,  164,  165,  164,
      165,  164,  165,   27,  164,  165,  164,  165,  164,  165,
       21,  164,  165,  164,  165,  164,  165,  164,  165,  164,
      165,  164,  165,  164,  165,   16,  164,  165,   17,  164,

      165,  164,  165,   23,  164,  165,  164,  165,   22,  164,
      165
    } ;

static yyconst flex_int16_t yy_accept[790] =
    {   0,
        1,    3,    5,    6,    9,   13,   15,   19,   23,   27,
       31,   35,   39,   44,   47,   50,   55,   60,   65,   70,
       75,   79,   84,   89,   94,   99,  104,  109,  114,  119,
      124,  129,  134,  139,  144,  149,  154,  159,  164,  169,
      174,  179,  184,  189,  190,  191,  191,  193,  193,  194,
      194,  197,  198,  199,  199,  200,  200,  200,  202,  204,
      204,  205,  208,  210,  210,  211,  212,  214,  216,  218,
      220,  223,  225,  227,  229,  231,  233,  235,  237,  239,
      241,  243,  245,  248,  250,  252,  254,  256,  258,  260,
      262,  264,  266,  268,  270,  272,  274,  276,  279,  281,

      284,  287,  289,  291,  293,  295,  297,  299,  301,  303,
      305,  307,  309,  312,  314,  316,  318,  320,  322,  324,
      326,  328,  330,  332,  334,  336,  338,  340,  342,  344,
      346,  348,  350,  352,  354,  356,  358,  360,  362,  364,
      366,  368,  370,  372,  373,  373,  375,  377,  377,  377,
      378,  379,  381,  384,  385,  386,  387,  388,  389,  390,
      392,  394,  397,  399,  401,  403,  405,  407,  409,  411,
      413,  415,  417,  419,  421,  423,  425,  427,  429,  431,
      434,  437,  439,  441,  443,  445,  448,  450,  452,  454,
      456,  458,  460,  462,  464,  467,  469,  471,  473,  476,

      479,  482,  484,  486,  488,  490,  492,  494,  496,  498,
      501,  503,  505,  507,  510,  512,  515,  518,  520,  522,
      524,  526,  528,  530,  532,  534,  536,  538,  540,  542,
      544,  546,  548,  550,  552,  554,  556,  559,  561,  563,
      565,  567,  569,  571,  573,  575,  577,  579,  581,  583,
      585,  588,  590,  592,  594,  596,  598,  600,  603,  606,
      608,  610,  612,  614,  616,  618,  621,  623,  625,  625,
      625,  625,  625,  625,  626,  628,  629,  630,  631,  632,
      633,  634,  635,  637,  639,  642,  644,  646,  648,  650,
      653,  655,  658,  661,  663,  665,  667,  669,  671,  673,

      675,  677,  679,  681,  683,  685,  687,  689,  692,  695,
      697,  699,  701,  703,  705,  707,  709,  712,  714,  717,
      719,  721,  723,  725,  727,  729,  731,  734,  736,  738,
      740,  742,  744,  746,  748,  750,  753,  755,  757,  759,
      762,  764,  766,  769,  771,  773,  775,  777,  779,  781,
      783,  785,  788,  790,  792,  794,  796,  798,  800,  803,
      805,  807,  809,  811,  813,  815,  817,  819,  821,  823,
      825,  828,  831,  833,  835,  838,  840,  842,  844,  846,
      848,  850,  852,  855,  857,  860,  862,  865,  867,  869,
      869,  869,  870,  870,  870,  870,  870,  872,  875,  876,

      877,  878,  879,  880,  881,  882,  884,  887,  889,  892,
      895,  897,  900,  903,  906,  909,  911,  914,  916,  918,
      920,  922,  924,  926,  928,  930,  932,  934,  936,  938,
      941,  943,  945,  948,  950,  952,  954,  956,  958,  961,
      963,  966,  968,  970,  972,  974,  976,  978,  980,  982,
      984,  986,  988,  990,  992,  994,  996,  998, 1000, 1002,
     1005, 1007, 1009, 1011, 1013, 1016, 1018, 1020, 1022, 1025,
     1027, 1029, 1032, 1034, 1036, 1039, 1041, 1043, 1045, 1047,
     1050, 1052, 1054, 1057, 1059, 1061, 1064, 1068, 1070, 1072,
     1075, 1077, 1079, 1082, 1084, 1086, 1088, 1091, 1091, 1092,

     1092, 1093, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1104, 1107, 1110, 1112, 1114, 1116, 1118, 1120, 1122,
     1124, 1126, 1129, 1131, 1134, 1136, 1139, 1141, 1144, 1146,
     1148, 1151, 1154, 1156, 1158, 1160, 1162, 1165, 1167, 1170,
     1172, 1175, 1177, 1179, 1181, 1184, 1187, 1189, 1192, 1195,
     1197, 1199, 1201, 1203, 1205, 1209, 1211, 1213, 1215, 1218,
     1221, 1223, 1225, 1228, 1230, 1233, 1236, 1239, 1242, 1244,
     1247, 1249, 1251, 1254, 1256, 1258, 1260, 1262, 1264, 1266,
     1268, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279,
     1281, 1283, 1285, 1287, 1289, 1291, 1293, 1296, 1299, 1301,

     1304, 1306, 1308, 1310, 1312, 1314, 1317, 1320, 1323, 1325,
     1327, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1347,
     1349, 1351, 1353, 1355, 1357, 1360, 1362, 1364, 1366, 1369,
     1371, 1374, 1376, 1379, 1381, 1383, 1385, 1387, 1388, 1390,
     1391, 1393, 1394, 1395, 1398, 1400, 1403, 1405, 1407, 1410,
     1412, 1414, 1416, 1418, 1420, 1423, 1425, 1428, 1430, 1432,
     1434, 1436, 1438, 1441, 1443, 1445, 1447, 1449, 1452, 1455,
     1457, 1459, 1461, 1463, 1466, 1469, 1471, 1473, 1475, 1477,
     1479, 1480, 1481, 1482, 1484, 1486, 1488, 1490, 1492, 1494,
     1496, 1499, 1502, 1504, 1506, 1509, 1511, 1514, 1516, 1518,

     1521, 1524, 1526, 1528, 1530, 1533, 1536, 1538, 1540, 1542,
     1543, 1545, 1546, 1548, 1550, 1552, 1554, 1556, 1559, 1562,
     1565, 1568, 1570, 1572, 1574, 1576, 1578, 1580, 1582, 1584,
     1586, 1587, 1588, 1590, 1593, 1595, 1597, 1599, 1601, 1603,
     1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1622,
     1625, 1627, 1629, 1631, 1634, 1637, 1639, 1641, 1643, 1645,
     1648, 1650, 1653, 1656, 1658, 1661, 1663, 1665, 1668, 1670,
     1672, 1674, 1677, 1679, 1681, 1684, 1686, 1688, 1690, 1692,
     1694, 1696, 1699, 1702, 1704, 1707, 1709, 1712, 1712
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    6,    4,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   18,   18,    7,    7,    7,
        7,    7,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   30,   31,   32,   33,   34,
       29,   35,   36,   37,   38,   29,   29,   29,   29,   29,
        7,    1,    7,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    6,
        6,    6,    6,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[801] =
    {   0,
        0,    0,  836, 2589,   64,   66, 2589,    0, 2589, 2589,
     2589,   59,   93,   58,   70,   69,  751,   74,   76,  129,
       77,  109,  111,  118,   87,  168,  153,   79,  180,   84,
      160,  187,  195,  199,  204,  206,  259,  218,  226,  247,
      212,  262,  104,   89,    0,  275,  737,  315,  781,  324,
      333,  369,  345,  774,    0,    0,   91,  115,  192,  357,
      379,  303,  201,  714,  704,  274,  357,  178,  266,  146,
      389,  252,  391,  394,  270,  396,  398,  400,  407,  125,
      403,  416,  409,  411,  414,  420,  424,  422,  418,  427,
      431,  441,  435,  464,  466,  476,  482,  143,  485,  487,

      316,  490,  492,  494,  498,  496,  502,  500,  504,  506,
      514,  508,  510,  516,  520,  523,  525,  531,  537,  539,
      546,  549,  558,  560,  570,  572,  574,  583,  585,  587,
      597,  589,  609,  612,  617,  624,  626,  636,  632,  640,
      646,  648,  656,  679,  694,  693,  705,  115,  222,    0,
        0,  658,  662,   88,   68,  575,  272,  229,  297,  667,
      691,  664,  678,  703,  717,  719,  722,  724,  728,  730,
      732,  735,  738,  740,  743,  745,  747,  749,  754,  761,
      768,  770,  773,  777,  780,  784,  788,  797,  799,  805,
      807,  809,  815,  820,  824,  827,  829,  834,  842,  846,

      848,  851,  853,  855,  861,  863,  866,  868,  870,  872,
      874,  879,  876,  881,  883,  885,  887,  889,  900,  902,
      904,  906,  908,  911,  915,  920,  917,  922,  925,  927,
      929,  933,  936,  939,  942,  946,  948,  952,  954,  957,
      967,  969,  971,  975,  978,  984,  981,  987,  993,  999,
      995, 1003, 1008, 1011, 1013, 1020, 1022, 1017, 1025, 1034,
     1038, 1040, 1043, 1048, 1045, 1050, 1052, 1056,  677,  259,
      266,  674,  404,  620, 1062,  325,   70,  454,  163,  511,
      344,  291, 1064, 1066, 1068, 1072, 1074, 1077, 1079, 1087,
     1090, 1092, 1094, 1098, 1100, 1102, 1104, 1107, 1109, 1112,

     1115, 1121, 1117, 1123, 1127, 1132, 1137, 1139, 1142, 1152,
     1144, 1157, 1159, 1165, 1168, 1174, 1170, 1181, 1176, 1184,
     1188, 1190, 1192, 1195, 1197, 1199, 1202, 1206, 1208, 1210,
     1213, 1215, 1218, 1223, 1233, 1235, 1237, 1242, 1247, 1249,
     1253, 1257, 1261, 1263, 1267, 1269, 1272, 1274, 1276, 1279,
     1281, 1284, 1286, 1288, 1293, 1295, 1299, 1303, 1305, 1311,
     1316, 1319, 1321, 1324, 1328, 1330, 1335, 1337, 1339, 1341,
     1344, 1347, 1350, 1355, 1357, 1359, 1361, 1368, 1374, 1376,
     1379, 1381, 1385, 1387, 1389, 1393, 1397, 1399, 1404,  431,
      520, 2589,  598,  618,  636,  761, 2589, 1406,  209,  577,

      231,  448,  412,  564,  628, 1408, 1413, 1415, 1417, 1423,
     1425, 1432, 1434, 1439, 1444, 1446, 1448, 1450, 1452, 1454,
     1456, 1458, 1460, 1465, 1462, 1467, 1470, 1473, 1477, 1480,
     1482, 1485, 1487, 1489, 1491, 1497, 1499, 1501, 1508, 1515,
     1517, 1519, 1521, 1523, 1525, 1535, 1537, 1539, 1542, 1544,
     1546, 1552, 1549, 1554, 1560, 1557, 1562, 1565, 1568, 1571,
     1574, 1576, 1580, 1586, 1588, 1592, 1595, 1600, 1602, 1606,
     1613, 1615, 1620, 1624, 1617, 1626, 1628, 1630, 1632, 1635,
     1637, 1639, 1643, 1645, 1650, 1647, 1653, 1657, 1661, 1663,
     1667, 1669, 1671, 1676, 1678, 1687, 1689,  609,  554,  794,

     2589,  552,  525,  654,  972, 1203,  354, 1390,  733,  839,
     1692, 1694, 1698, 1700, 1702, 1709, 1711, 1713, 1718, 1720,
     1722, 1726, 1728, 1730, 1733, 1735, 1737, 1739, 1742, 1748,
     1750, 1755, 1759, 1761, 1763, 1766, 1768, 1774, 1776, 1779,
     1781, 1784, 1787, 1794, 1796, 1798, 1801, 1803, 1805, 1811,
     1818, 1820, 1822, 1825, 1827, 1829, 1832, 1834, 1836, 1838,
     1842, 1844, 1846, 1850, 1852, 1854, 1857, 1859, 1863, 1869,
     1875, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897,
     1899,  470, 1440,  392, 1512,  651, 1743,  810,  590, 1901,
     1904, 1910, 1912, 1920, 1922, 1914, 1917, 1924, 1926, 1933,

     1935, 1940, 1945, 1958, 1960, 1962, 1966, 1971, 1973, 1975,
     1978, 1980, 1983, 1985, 1987, 1989, 1993, 1995, 1997, 1999,
     2001, 2005, 2007, 2009, 2011, 2020, 2022, 2026, 2031, 2034,
     2036, 2038, 2043, 2045, 2047, 2049, 2053, 1785,  342,  752,
      304, 1848,  741, 2055, 2059, 2057, 2062, 2070, 2073, 2075,
     2077, 2079, 2082, 2084, 2086, 2088, 2094, 2096, 2098, 2100,
     2103, 2110, 2108, 2115, 2119, 2123, 2127, 2129, 2132, 2135,
     2137, 2140, 2146, 2148, 2150, 2152, 2157, 2159, 2162,  275,
     1124, 1902,  468, 2164, 2170, 2172, 2174, 2179, 2181, 2183,
     2185, 2187, 2190, 2192, 2196, 2201, 2207, 2209, 2211, 2213,

     2218, 2222, 2224, 2228, 2232, 2234, 2236, 2240, 2242, 2012,
      236,  830, 2244, 2246, 2248, 2250, 2254, 2257, 2259, 2261,
     2263, 2265, 2267, 2272, 2274, 2276, 2286, 2292, 2289, 2294,
     2165, 2175, 2296, 2298, 2304, 2306, 2309, 2311, 2313, 2316,
     2325, 2328, 2331, 2333, 2337, 2339, 2341,  138, 2197, 2343,
     2350, 2352, 2359, 2361, 2363, 2367, 2370, 2374, 2376, 2379,
     2385, 2387, 2389,  123, 2391, 2394, 2398, 2405, 2407, 2411,
     2413, 2415, 2417, 2420, 2425, 2429, 2431, 2433, 2436, 2438,
     2442, 2446, 2450, 2453, 2455, 2457, 2459, 2589, 2521, 2525,
     2528, 2533, 2537, 2544, 2551, 2554, 2560, 2567, 2574, 2581

    } ;

static yyconst flex_int16_t yy_def[801] =
    {   0,
      788,    1,  788,  788,  788,  788,  788,  789,  788,  788,
      788,  790,  791,  788,  788,  790,   16,  792,  792,  792,
      793,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  788,  789,  788,   16,  788,  791,  791,
      791,  791,  788,  794,  795,  796,  792,  792,  792,  788,
      791,   26,  792,  793,  793,  793,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  788,  791,  791,  791,  797,  798,  795,
      796,  792,  792,  793,  793,  793,  793,  793,  793,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  797,  799,
      797,  798,  800,  788,  792,  793,  793,  793,  793,  793,
      793,  793,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  797,
      797,  788,  797,  800,  798,  798,  788,  792,  793,  793,

      793,  793,  793,  793,  793,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  788,  788,  798,

      788,  788,  788,  793,  793,  793,  793,  793,  793,  793,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  788,  793,  793,  793,  793,  793,  793,  793,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  793,  793,  793,
      793,  793,  793,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  793,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  793,  793,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  793,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,    0,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788

    } ;

static yyconst flex_int16_t yy_nxt[2655] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   17,   18,
       19,   18,   18,   20,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,   22,
       23,   24,   25,   26,   27,   28,   18,   29,   30,   18,
       31,   32,   33,   34,   35,   18,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   44,   44,   44,   44,   46,
       53,   53,   53,   53,   53,   53,   53,   54,   64,   46,
       64,   55,   48,   49,   57,   49,   57,   64,   49,   57,
       44,   44,   48,   49,   57,  277,   49,   57,   64,   59,

       49,  788,   48,   50,  400,   51,   51,   51,   51,   51,
       51,   51,   48,   49,   57,   66,   52,  276,   49,   57,
       49,   57,  270,  102,   49,   57,  271,   49,   57,   93,
       82,   56,   94,   64,   49,   57,   52,   60,   61,   57,
       83,   62,   62,   62,   62,   62,   62,   62,   64,   67,
       84,  143,   49,   57,   72,   49,   57,   77,   73,   68,
       63,   69,   49,   57,   74,   70,   71,   75,   78,   49,
       57,   79,   80,   64,   76,   81,   60,   61,   57,  177,
       62,   62,   62,   62,   62,   62,   62,   49,   57,   49,
       57,  163,   88,   95,  402,   96,   49,   57,   97,  103,

       89,   49,   57,   90,   49,   57,   91,  104,   49,   57,
       49,   57,   92,   49,   57,   49,   57,  152,   85,   64,
       86,   49,   57,  153,   98,  161,  105,   49,   57,  273,
       87,   99,  100,  274,  107,   49,   57,  101,  108,   64,
      106,   64,  109,  114,  504,  120,   64,  115,  110,  121,
      116,  111,  281,  112,  506,  113,   49,   57,  139,  140,
      117,   49,   57,  118,  131,  122,  391,  119,   49,   57,
      392,   49,   57,  270,  132,   49,   57,  393,  134,   49,
       57,  133,   64,  135,   64,   64,  136,   53,   53,   53,
       53,   53,   53,   53,  137,  154,  155,  166,  156,  280,

      138,   64,  123,  157,  158,  159,  124,   64,  162,  125,
      126,  788,   49,  169,   64,  141,  282,  127,  128,  142,
      129,  405,  130,   60,   60,   49,   57,  144,  144,  144,
      144,  144,  144,  144,  788,   64,  146,  146,  146,  146,
      146,  146,  146,   50,  399,   51,   51,   51,   51,   51,
       51,   51,   64,   58,   64,   58,   52,   53,   53,   53,
       53,   53,   53,   53,   64,   58,   49,   57,   48,  144,
      144,  144,  144,  144,  144,  144,   52,   60,   61,  145,
      404,  147,  147,  147,  147,  147,  147,  147,   48,  145,
      586,  147,  147,  147,  147,  147,  147,  147,   49,   57,

       49,   57,   64,   49,   57,   49,   57,   49,   57,   49,
       57,  396,   49,   57,  160,  397,   49,   57,   49,   57,
       49,   57,   64,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,  508,   49,   57,  270,  173,
       49,   57,  498,  167,   49,   57,  164,  168,  175,  178,
       49,   57,  165,  174,  170,  171,  172,  179,   64,  176,
      180,  184,  186,  183,   64,  189,  181,  190,  182,  507,
      193,  185,  192,   49,   57,   49,   57,  187,   64,  188,
      194,  395,  191,  401,  199,   49,   57,  195,  197,  712,
      200,   49,   57,  196,   49,   57,   49,   57,  201,   49,

       57,   49,   57,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,   49,
       57,   64,  198,   49,   57,   49,   57,  270,  203,   49,
       57,  499,   49,   57,   49,   57,  395,  204,  211,  202,
       49,   57,  403,  208,  205,  206,   49,   57,   49,   57,
      207,  209,  210,  212,  216,   49,   57,  218,   49,   57,
      213,  214,  215,  395,  217,  390,  219,   49,   57,   49,
       57,  225,  223,  220,   64,  226,  221,  222,  224,   49,
       57,   49,   57,   49,   57,   64,  227,   64,  228,  233,
      509,  229,   49,   57,   49,   57,   49,   57,   49,   57,

       64,  230,  278,  231,  232,  270,   49,   57,  234,  393,
      235,  240,  279,  241,  236,  505,  237,  239,   49,   57,
      390,   49,   57,  643,  238,  500,   49,   57,  249,  501,
      242,  395,  244,   49,   57,   49,   57,  243,   64,  245,
      246,   49,   57,  394,  247,   49,   57,  502,  250,   49,
       57,  510,  251,  248,  253,   49,   57,   49,   57,  254,
      258,   64,  255,  252,   64,   49,   57,   49,   57,  256,
      257,   49,   57,   49,   57,  263,   49,   57,  640,  264,
      259,  394,  260,  261,  270,  275,  262,   49,   57,  583,
      267,  144,  144,  144,  144,  144,  144,  144,  265,  268,

       49,   57,  266,  145,  788,  146,  146,  146,  146,  146,
      146,  146,   49,   57,   64,  145,   52,  147,  147,  147,
      147,  147,  147,  147,  788,  283,   49,   57,   49,   57,
      284,   49,   57,   49,   57,  285,   52,   49,   57,   49,
       57,   49,   57,   64,   49,   57,  286,   49,   57,   49,
       57,   64,   49,   57,   49,   57,   49,   57,   49,   57,
      683,  289,   64,   49,   57,  588,  288,  291,  273,  287,
       49,   57,  503,  292,  290,  293,  294,   49,   57,   49,
       57,  149,   49,   57,  681,  300,   49,   57,  301,   49,
       57,  145,  296,   49,   57,  295,  297,   49,   57,  788,

      303,  394,  298,  299,  302,  582,   49,   57,   49,   57,
      306,  304,  307,  788,   49,   57,   49,   57,   49,   57,
       64,  308,  305,  309,   49,   57,  311,  310,  312,   49,
       57,  313,  642,   49,   57,  788,   49,   57,   49,   57,
       64,  314,  318,   49,   57,  315,  319,  316,  317,   64,
      320,   49,   57,  732,  322,   49,   57,   49,   57,  323,
       49,   57,   49,   57,   49,   57,  321,  324,  325,  326,
       49,   57,   49,   57,  589,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,  327,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,

      788,  328,  331,  330,  329,  334,  333,  788,  335,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,  332,
       49,   57,  338,  339,   49,   57,   49,   57,  336,   49,
       57,   49,   57,  337,   49,   57,   49,   57,   49,   57,
      788,  340,   49,   57,  345,   49,   57,  342,   49,   57,
      341,   49,   57,  788,  344,   49,   57,   49,   57,  343,
      346,   49,   57,   49,   57,  349,   49,   57,  347,  348,
      355,  350,  353,  788,  351,  352,   49,   57,   49,   57,
       49,   57,   64,  359,   49,   57,  354,   49,   57,  356,
       49,   57,  357,   49,   57,  362,   49,   57,  788,  358,

      788,  360,   49,   57,   49,   57,  361,  364,   49,   57,
      584,  363,   49,   57,  368,  788,  366,   49,   57,  370,
       49,   57,   49,   57,  788,  365,   49,   57,  367,   49,
       57,   49,   57,  369,   49,   57,  371,  788,  372,  788,
      373,  788,  375,   49,   57,  374,  376,   49,   57,   49,
       57,  377,   49,   57,   49,   57,  379,   49,   57,   49,
       57,   49,   57,  788,  378,   49,   57,  380,  788,  381,
      788,   49,   57,   49,   57,   49,   57,   49,   57,  384,
      383,   49,   57,   49,   57,  788,   49,   57,   49,   57,
      388,  387,  382,  398,  788,  385,   49,   57,  386,   49,

       57,   49,   57,   49,   57,  788,  389,   49,   57,   49,
       57,   49,   57,   49,   57,  409,   49,   57,   49,   57,
      406,   49,   57,  407,   49,   57,   49,   57,  408,  410,
       49,   57,   49,   57,   64,  411,   49,   57,  788,  412,
      788,   49,   57,  416,  413,  415,   49,   57,   49,   57,
      788,   49,   57,   49,   57,  710,  418,  414,  788,  419,
      423,   49,   57,  788,  420,  417,   49,   57,   49,   57,
      421,  422,  788,  426,   49,   57,  424,   49,   57,   49,
       57,  425,  427,   49,   57,   49,   57,  431,  428,  429,
       49,   57,  788,   49,   57,  788,  430,   49,   57,   49,

       57,   49,   57,  433,   49,   57,   49,   57,   49,   57,
      432,   49,   57,   64,  435,   49,   57,   49,   57,   49,
       57,  788,   49,   57,   49,   57,  434,   49,   57,  788,
      436,  439,   49,   57,  442,  437,  438,  788,  444,  788,
      440,  585,   49,   57,   49,   57,   49,   57,  788,  445,
      441,   49,   57,  788,  449,  443,   49,   57,   49,   57,
      788,  451,   49,   57,  446,  448,   49,   57,  788,  447,
       49,   57,   49,   57,  450,  452,   49,   57,   49,   57,
      788,   49,   57,   49,   57,   49,   57,  453,   49,   57,
       49,   57,  456,   49,   57,   49,   57,   49,   57,  454,

      788,  458,   49,   57,   49,   57,  788,  455,   49,   57,
      457,  461,   49,   57,   49,   57,  788,  462,  788,  459,
       49,   57,  788,  463,  465,   49,   57,  460,   49,   57,
       49,   57,  464,   49,   57,  467,  788,   49,   57,   49,
       57,  471,  788,  466,   49,   57,   49,   57,   49,   57,
       49,   57,  468,   49,   57,  470,   49,   57,  469,   49,
       57,  788,  472,  473,   49,   57,   49,   57,   49,   57,
       49,   57,  474,  788,  476,  477,  479,   49,   57,  475,
      481,  788,  478,   49,   57,   49,   57,  482,   49,   57,
       49,   57,  788,  480,   49,   57,   49,   57,   49,   57,

       64,  485,   49,   57,  788,  486,   49,   57,   49,   57,
      788,  483,  484,   49,   57,   49,   57,   49,   57,  788,
      487,  489,   49,   57,   49,   57,   49,   57,  587,  490,
      788,  488,   49,   57,   49,   57,  493,  788,  494,  788,
      491,   49,   57,   49,   57,  492,  497,  511,   49,   57,
       64,  495,  496,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,  512,   49,   57,   49,   57,  638,   49,
       57,  788,   49,   57,  514,  788,   49,   57,  513,   49,
       57,   49,   57,  517,   49,   57,   49,   57,   49,   57,

       49,   57,  515,  788,  516,  522,   49,   57,   49,   57,
       49,   57,  519,  524,  523,  521,  520,   49,   57,  518,
      525,  526,   64,  527,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,  529,  788,  530,  788,
      531,  528,  788,  533,   49,   57,   49,   57,   49,   57,
      639,   49,   57,   49,   57,   49,   57,  532,   49,   57,
      535,   49,   57,   49,   57,  534,   49,   57,  536,   49,
       57,   49,   57,  537,   49,   57,  538,   49,   57,  540,
       49,   57,  541,   49,   57,   49,   57,  788,  543,   49,
       57,  545,  546,  539,  542,   49,   57,   49,   57,  788,

      544,   49,   57,  548,   49,   57,  788,  552,  547,   49,
       57,   49,   57,  788,  550,   49,   57,  554,  788,  551,
      549,  555,   49,   57,   49,   57,   49,   57,  556,   49,
       57,  788,  553,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,  559,   49,   57,   49,   57,   49,   57,
      557,  558,   49,   57,   49,   57,   49,   57,  560,   49,
       57,  562,   49,   57,  788,  561,   49,   57,  563,  565,
       49,   57,   49,   57,  788,  566,   49,   57,   49,   57,
       49,   57,  788,  568,  564,   49,   57,   49,   57,  788,
      567,  788,  571,  572,  788,  569,   49,   57,   49,   57,

      570,   49,   57,   49,   57,  788,  575,   49,   57,   49,
       57,   49,   57,  574,  573,  788,  576,  579,   49,   57,
       49,   57,   49,   57,  788,  580,  577,   49,   57,   49,
       57,   49,   57,  590,  578,   49,   57,   49,   57,   49,
       57,  581,   49,   57,   49,   57,   49,   57,   49,   57,
      593,   49,   57,   64,  591,  788,  596,   49,   57,   49,
       57,  592,  594,  597,   49,   57,  599,  595,   49,   57,
       49,   57,   49,   57,  600,   49,   57,   49,   57,  788,
      598,  641,  602,   49,   57,   49,   57,  601,   49,   57,
       49,   57,  788,   49,   57,   64,   49,   57,  604,  788,

      603,  788,  605,   49,   57,   49,   57,   49,   57,  608,
       49,   57,   49,   57,   49,   57,  606,  610,  788,  609,
       49,   57,  611,  680,  607,  612,  613,   49,   57,   49,
       57,   49,   57,  614,   49,   57,   49,   57,   49,   57,
      615,   49,   57,   49,   57,   49,   57,   49,   57,  788,
      616,   49,   57,   49,   57,   49,   57,  617,   64,   49,
       57,   49,   57,   49,   57,  619,   49,   57,   49,   57,
      788,  618,   49,   57,  788,  622,  788,  623,   49,   57,
      788,  624,  788,  620,   49,   57,  682,  625,  621,  626,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,

       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,   64,   49,   57,  788,  627,  788,  628,   49,
       57,   49,   57,   49,   57,  629,   49,   57,  630,   49,
       57,   49,   57,   49,   57,   49,   57,  631,  788,  632,
      711,  633,   49,   57,   49,   57,  635,  636,  788,   49,
       57,  634,  788,  646,   49,   57,  788,  637,  788,  644,
      645,  788,  647,  648,  788,  649,  650,   49,   57,   49,
       57,   49,   57,  788,  652,   49,   57,  788,  651,  653,
       49,   57,   49,   57,   49,   57,  654,   49,   57,   49,
       57,  788,   49,   57,   49,   57,   49,   57,   49,   57,

      788,  655,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,  788,  656,   49,   57,   49,   57,   49,   57,
       49,   57,   64,  659,  660,  657,  661,  658,  662,   49,
       57,   49,   57,  788,  664,   49,   57,  788,  665,  663,
       49,   57,  666,   49,   57,   49,   57,   49,   57,  669,
      731,  667,   49,   57,   49,   57,   49,   57,   49,   57,
      670,  668,   49,   57,   49,   57,   49,   57,   49,   57,
      671,   49,   57,  788,  672,  788,  674,  788,  673,   49,
       57,  675,   49,   57,   49,   57,   49,   57,   49,   57,
      677,   49,   57,   49,   57,   49,   57,   49,   57,  678,

      679,  676,  684,   49,   57,   49,   57,   49,   57,   49,
       57,  788,   49,   57,  687,  788,  688,   49,   57,   49,
       57,  685,  788,  690,   49,   57,  788,  686,   49,   57,
      691,  788,   49,   57,  788,  689,   49,   57,   49,   57,
      692,   49,   57,  695,   49,   57,   49,   57,  788,   49,
       57,  694,  696,  697,  693,   49,   57,   49,   57,   49,
       57,   49,   57,  788,  698,  700,   49,   57,   49,   57,
      701,   49,   57,   49,   57,   64,  699,  788,  702,   49,
       57,   49,   57,   49,   57,   64,  703,  704,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,  708,   49,

       57,   49,   57,  748,  705,   49,   57,   64,  713,  706,
       49,   57,  714,  749,  707,  709,   49,   57,   49,   57,
       49,   57,   49,   57,  718,  716,  715,   49,   57,  719,
      717,   49,   57,   49,   57,  764,  721,   49,   57,  788,
      722,   49,   57,   49,   57,   49,   57,  720,  723,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,   49,
       57,  788,  726,   49,   57,  724,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,  788,  725,
      729,   49,   57,   49,   57,   49,   57,  735,  788,  734,
      728,  733,  727,  736,  730,   49,   57,  737,   49,   57,

      788,   49,   57,   49,   57,   49,   57,   49,   57,  788,
      738,  740,  739,   49,   57,   49,   57,  742,   49,   57,
       49,   57,   49,   57,  788,   49,   57,  788,  741,  744,
      743,  745,  788,  747,   49,   57,  788,   49,   57,  746,
       49,   57,   49,   57,  788,  751,   49,   57,   49,   57,
       49,   57,   49,   57,  754,  788,  755,  756,  750,   49,
       57,   49,   57,  752,  757,  788,  753,  758,   49,   57,
       49,   57,   49,   57,  788,  760,   49,   57,  761,   49,
       57,  788,  762,   49,   57,   49,   57,  759,   49,   57,
      788,  763,  788,  765,   49,   57,   49,   57,   49,   57,

       49,   57,  788,   49,   57,  788,  766,   49,   57,  788,
      768,  769,  788,  767,   49,   57,   49,   57,  788,  771,
       49,   57,   49,   57,   49,   57,   49,   57,  772,   49,
       57,  788,  770,  773,   49,   57,  788,  774,   49,   57,
       49,   57,   49,   57,  788,   49,   57,   49,   57,  788,
      775,   49,   57,  788,  776,   49,   57,  777,  778,   49,
       57,  779,   49,   57,   49,   57,   49,   57,   49,   57,
      788,  788,  788,  788,  780,  788,  782,  788,  781,  783,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  784,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  785,  788,  788,  788,  788,  786,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      787,   45,  788,   45,   45,   45,   45,   45,   47,   47,
       49,   49,   49,   49,   49,   58,   58,   58,   58,   58,
       65,   65,   65,   65,  148,  148,  148,  148,  148,  148,
      148,  150,  788,  150,  150,  150,  150,  150,  151,  151,
      269,  269,  269,  269,  269,  269,  269,  272,  272,  272,
      272,  272,  272,  272,  390,  390,  390,  390,  390,  390,
      390,  395,  395,  395,  395,  395,  395,  395,    3,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788
    } ;

static yyconst flex_int16_t yy_chk[2655] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    6,    6,   12,
       14,   14,   14,   14,   14,   14,   14,   15,  155,   16,
      277,   15,   12,   18,   18,   19,   19,   21,   28,   28,
       44,   44,   16,   30,   30,  155,   25,   25,  154,   19,

       57,   57,   12,   13,  277,   13,   13,   13,   13,   13,
       13,   13,   16,   43,   43,   21,   13,  154,   22,   22,
       23,   23,  148,   30,   58,   58,  148,   24,   24,   28,
       25,   16,   28,  764,   80,   80,   13,   20,   20,   20,
       25,   20,   20,   20,   20,   20,   20,   20,  748,   22,
       25,   43,   98,   98,   23,   70,   70,   24,   23,   22,
       20,   22,   27,   27,   23,   22,   22,   23,   24,   31,
       31,   24,   24,  279,   23,   24,   26,   26,   26,   80,
       26,   26,   26,   26,   26,   26,   26,   68,   68,   29,
       29,   70,   27,   29,  279,   29,   32,   32,   29,   31,

       27,   59,   59,   27,   33,   33,   27,   31,   34,   34,
       63,   63,   27,   35,   35,   36,   36,   59,   26,  399,
       26,   41,   41,   63,   29,   68,   32,   38,   38,  149,
       26,   29,   29,  149,   33,   39,   39,   29,   33,  158,
       32,  401,   33,   35,  399,   36,  711,   35,   33,   36,
       35,   34,  158,   34,  401,   34,   40,   40,   41,   41,
       35,   72,   72,   35,   38,   36,  270,   35,   37,   37,
      270,   42,   42,  271,   38,   69,   69,  271,   39,   75,
       75,   38,  157,   39,   66,  680,   40,   46,   46,   46,
       46,   46,   46,   46,   40,   66,   66,   72,   66,  157,

       40,  282,   37,   66,   66,   66,   37,  159,   69,   37,
       37,   62,   62,   75,  641,   42,  159,   37,   37,   42,
       37,  282,   37,   48,   48,  101,  101,   48,   48,   48,
       48,   48,   48,   48,   50,  276,   50,   50,   50,   50,
       50,   50,   50,   51,  276,   51,   51,   51,   51,   51,
       51,   51,  639,   62,  281,   62,   51,   53,   53,   53,
       53,   53,   53,   53,  507,   62,   67,   67,   53,   60,
       60,   60,   60,   60,   60,   60,   51,   52,   52,   52,
      281,   52,   52,   52,   52,   52,   52,   52,   53,   61,
      507,   61,   61,   61,   61,   61,   61,   61,   71,   71,

       73,   73,  584,   74,   74,   76,   76,   77,   77,   78,
       78,  273,   81,   81,   67,  273,   79,   79,   83,   83,
       84,   84,  403,   85,   85,   82,   82,   89,   89,   86,
       86,   88,   88,   87,   87,  403,   90,   90,  390,   78,
       91,   91,  390,   73,   93,   93,   71,   74,   79,   81,
       92,   92,   71,   78,   76,   77,   77,   82,  402,   79,
       82,   85,   86,   84,  278,   87,   82,   87,   83,  402,
       89,   85,   88,   94,   94,   95,   95,   86,  683,   86,
       90,  582,   87,  278,   95,   96,   96,   91,   93,  683,
       96,   97,   97,   92,   99,   99,  100,  100,   97,  102,

      102,  103,  103,  104,  104,  106,  106,  105,  105,  108,
      108,  107,  107,  109,  109,  110,  110,  112,  112,  113,
      113,  280,   94,  111,  111,  114,  114,  391,  100,  115,
      115,  391,  116,  116,  117,  117,  503,  100,  106,   99,
      118,  118,  280,  103,  100,  100,  119,  119,  120,  120,
      102,  104,  105,  107,  109,  121,  121,  111,  122,  122,
      107,  108,  108,  502,  110,  499,  112,  123,  123,  124,
      124,  118,  117,  114,  404,  119,  115,  116,  117,  125,
      125,  126,  126,  127,  127,  156,  120,  400,  121,  122,
      404,  121,  128,  128,  129,  129,  130,  130,  132,  132,

      589,  121,  156,  121,  121,  393,  131,  131,  123,  393,
      123,  126,  156,  127,  123,  400,  123,  125,  133,  133,
      498,  134,  134,  589,  124,  394,  135,  135,  132,  394,
      127,  274,  129,  136,  136,  137,  137,  128,  405,  130,
      131,  139,  139,  395,  131,  138,  138,  395,  132,  140,
      140,  405,  132,  131,  134,  141,  141,  142,  142,  134,
      135,  586,  134,  133,  504,  143,  143,  152,  152,  134,
      134,  153,  153,  162,  162,  139,  160,  160,  586,  139,
      136,  272,  137,  138,  269,  152,  138,  163,  163,  504,
      142,  144,  144,  144,  144,  144,  144,  144,  140,  143,

      161,  161,  141,  146,  145,  146,  146,  146,  146,  146,
      146,  146,  164,  164,   65,  147,  146,  147,  147,  147,
      147,  147,  147,  147,   64,  160,  165,  165,  166,  166,
      161,  167,  167,  168,  168,  163,  146,  169,  169,  170,
      170,  171,  171,  509,  172,  172,  164,  173,  173,  174,
      174,  643,  175,  175,  176,  176,  177,  177,  178,  178,
      643,  167,  640,  179,  179,  509,  166,  169,  396,  165,
      180,  180,  396,  170,  168,  171,  172,  181,  181,  182,
      182,   54,  183,  183,  640,  177,  184,  184,  178,  185,
      185,   49,  174,  186,  186,  173,  175,  187,  187,   47,

      180,  500,  176,  176,  179,  500,  188,  188,  189,  189,
      182,  181,  183,   17,  190,  190,  191,  191,  192,  192,
      588,  184,  181,  185,  193,  193,  186,  185,  186,  194,
      194,  186,  588,  195,  195,    3,  196,  196,  197,  197,
      712,  186,  189,  198,  198,  186,  190,  187,  188,  510,
      191,  199,  199,  712,  193,  200,  200,  201,  201,  194,
      202,  202,  203,  203,  204,  204,  192,  195,  196,  197,
      205,  205,  206,  206,  510,  207,  207,  208,  208,  209,
      209,  210,  210,  211,  211,  213,  213,  198,  212,  212,
      214,  214,  215,  215,  216,  216,  217,  217,  218,  218,

        0,  202,  204,  203,  202,  207,  206,    0,  208,  219,
      219,  220,  220,  221,  221,  222,  222,  223,  223,  205,
      224,  224,  212,  213,  225,  225,  227,  227,  209,  226,
      226,  228,  228,  211,  229,  229,  230,  230,  231,  231,
        0,  215,  232,  232,  222,  233,  233,  219,  234,  234,
      218,  235,  235,    0,  221,  236,  236,  237,  237,  220,
      223,  238,  238,  239,  239,  225,  240,  240,  223,  224,
      231,  226,  229,    0,  227,  228,  241,  241,  242,  242,
      243,  243,  505,  234,  244,  244,  230,  245,  245,  232,
      247,  247,  232,  246,  246,  238,  248,  248,    0,  233,

        0,  235,  249,  249,  251,  251,  236,  240,  250,  250,
      505,  239,  252,  252,  243,    0,  242,  253,  253,  245,
      254,  254,  255,  255,    0,  241,  258,  258,  242,  256,
      256,  257,  257,  244,  259,  259,  246,    0,  247,    0,
      248,    0,  250,  260,  260,  249,  252,  261,  261,  262,
      262,  253,  263,  263,  265,  265,  255,  264,  264,  266,
      266,  267,  267,    0,  254,  268,  268,  256,    0,  257,
        0,  275,  275,  283,  283,  284,  284,  285,  285,  262,
      261,  286,  286,  287,  287,    0,  288,  288,  289,  289,
      267,  265,  260,  275,    0,  263,  290,  290,  264,  291,

      291,  292,  292,  293,  293,    0,  268,  294,  294,  295,
      295,  296,  296,  297,  297,  287,  298,  298,  299,  299,
      283,  300,  300,  284,  301,  301,  303,  303,  286,  288,
      302,  302,  304,  304,  681,  289,  305,  305,    0,  291,
        0,  306,  306,  297,  294,  296,  307,  307,  308,  308,
        0,  309,  309,  311,  311,  681,  299,  295,    0,  300,
      302,  310,  310,    0,  300,  298,  312,  312,  313,  313,
      300,  301,    0,  305,  314,  314,  303,  315,  315,  317,
      317,  304,  306,  316,  316,  319,  319,  311,  307,  309,
      318,  318,    0,  320,  320,    0,  310,  321,  321,  322,

      322,  323,  323,  313,  324,  324,  325,  325,  326,  326,
      312,  327,  327,  506,  315,  328,  328,  329,  329,  330,
      330,    0,  331,  331,  332,  332,  314,  333,  333,    0,
      316,  321,  334,  334,  324,  318,  320,    0,  326,    0,
      322,  506,  335,  335,  336,  336,  337,  337,    0,  328,
      323,  338,  338,    0,  332,  325,  339,  339,  340,  340,
        0,  334,  341,  341,  329,  331,  342,  342,    0,  330,
      343,  343,  344,  344,  333,  335,  345,  345,  346,  346,
        0,  347,  347,  348,  348,  349,  349,  337,  350,  350,
      351,  351,  341,  352,  352,  353,  353,  354,  354,  338,

        0,  344,  355,  355,  356,  356,    0,  339,  357,  357,
      342,  347,  358,  358,  359,  359,    0,  348,    0,  345,
      360,  360,    0,  349,  351,  361,  361,  346,  362,  362,
      363,  363,  350,  364,  364,  354,    0,  365,  365,  366,
      366,  358,    0,  353,  367,  367,  368,  368,  369,  369,
      370,  370,  355,  371,  371,  357,  372,  372,  356,  373,
      373,    0,  360,  361,  374,  374,  375,  375,  376,  376,
      377,  377,  362,    0,  364,  365,  367,  378,  378,  363,
      369,    0,  366,  379,  379,  380,  380,  370,  381,  381,
      382,  382,    0,  368,  383,  383,  384,  384,  385,  385,

      508,  376,  386,  386,    0,  377,  387,  387,  388,  388,
        0,  373,  374,  389,  389,  398,  398,  406,  406,    0,
      378,  380,  407,  407,  408,  408,  409,  409,  508,  381,
        0,  379,  410,  410,  411,  411,  386,    0,  388,    0,
      382,  412,  412,  413,  413,  384,  389,  406,  414,  414,
      583,  388,  388,  415,  415,  416,  416,  417,  417,  418,
      418,  419,  419,  420,  420,  421,  421,  422,  422,  423,
      423,  425,  425,  408,  424,  424,  426,  426,  583,  427,
      427,    0,  428,  428,  416,    0,  429,  429,  411,  430,
      430,  431,  431,  420,  432,  432,  433,  433,  434,  434,

      435,  435,  418,    0,  419,  425,  436,  436,  437,  437,
      438,  438,  422,  427,  426,  424,  423,  439,  439,  421,
      428,  429,  585,  431,  440,  440,  441,  441,  442,  442,
      443,  443,  444,  444,  445,  445,  434,    0,  435,    0,
      436,  432,    0,  438,  446,  446,  447,  447,  448,  448,
      585,  449,  449,  450,  450,  451,  451,  437,  453,  453,
      442,  452,  452,  454,  454,  440,  456,  456,  443,  455,
      455,  457,  457,  444,  458,  458,  445,  459,  459,  447,
      460,  460,  448,  461,  461,  462,  462,    0,  450,  463,
      463,  452,  453,  446,  449,  464,  464,  465,  465,    0,

      451,  466,  466,  455,  467,  467,    0,  459,  454,  468,
      468,  469,  469,    0,  457,  470,  470,  462,    0,  458,
      456,  463,  471,  471,  472,  472,  475,  475,  464,  473,
      473,    0,  461,  474,  474,  476,  476,  477,  477,  478,
      478,  479,  479,  468,  480,  480,  481,  481,  482,  482,
      466,  467,  483,  483,  484,  484,  486,  486,  470,  485,
      485,  473,  487,  487,    0,  471,  488,  488,  474,  477,
      489,  489,  490,  490,    0,  478,  491,  491,  492,  492,
      493,  493,    0,  481,  476,  494,  494,  495,  495,    0,
      479,    0,  484,  485,    0,  482,  496,  496,  497,  497,

      483,  511,  511,  512,  512,    0,  491,  513,  513,  514,
      514,  515,  515,  489,  488,    0,  492,  495,  516,  516,
      517,  517,  518,  518,    0,  495,  494,  519,  519,  520,
      520,  521,  521,  511,  494,  522,  522,  523,  523,  524,
      524,  496,  525,  525,  526,  526,  527,  527,  528,  528,
      516,  529,  529,  587,  514,    0,  519,  530,  530,  531,
      531,  515,  517,  520,  532,  532,  523,  518,  533,  533,
      534,  534,  535,  535,  525,  536,  536,  537,  537,    0,
      521,  587,  528,  538,  538,  539,  539,  527,  540,  540,
      541,  541,    0,  542,  542,  638,  543,  543,  530,    0,

      529,    0,  532,  544,  544,  545,  545,  546,  546,  535,
      547,  547,  548,  548,  549,  549,  533,  538,    0,  536,
      550,  550,  540,  638,  534,  542,  543,  551,  551,  552,
      552,  553,  553,  544,  554,  554,  555,  555,  556,  556,
      547,  557,  557,  558,  558,  559,  559,  560,  560,    0,
      550,  561,  561,  562,  562,  563,  563,  551,  642,  564,
      564,  565,  565,  566,  566,  553,  567,  567,  568,  568,
        0,  552,  569,  569,    0,  557,    0,  558,  570,  570,
        0,  561,    0,  554,  571,  571,  642,  562,  556,  564,
      572,  572,  573,  573,  574,  574,  575,  575,  576,  576,

      577,  577,  578,  578,  579,  579,  580,  580,  581,  581,
      590,  590,  682,  591,  591,    0,  569,    0,  571,  592,
      592,  593,  593,  596,  596,  572,  597,  597,  574,  594,
      594,  595,  595,  598,  598,  599,  599,  575,    0,  576,
      682,  577,  600,  600,  601,  601,  579,  580,    0,  602,
      602,  578,    0,  592,  603,  603,    0,  581,    0,  590,
      591,    0,  593,  594,    0,  595,  596,  604,  604,  605,
      605,  606,  606,    0,  601,  607,  607,    0,  599,  602,
      608,  608,  609,  609,  610,  610,  603,  611,  611,  612,
      612,    0,  613,  613,  614,  614,  615,  615,  616,  616,

        0,  604,  617,  617,  618,  618,  619,  619,  620,  620,
      621,  621,    0,  605,  622,  622,  623,  623,  624,  624,
      625,  625,  710,  612,  613,  609,  614,  610,  615,  626,
      626,  627,  627,    0,  617,  628,  628,    0,  618,  616,
      629,  629,  620,  630,  630,  631,  631,  632,  632,  623,
      710,  621,  633,  633,  634,  634,  635,  635,  636,  636,
      624,  622,  637,  637,  644,  644,  646,  646,  645,  645,
      626,  647,  647,    0,  627,    0,  630,    0,  628,  648,
      648,  632,  649,  649,  650,  650,  651,  651,  652,  652,
      635,  653,  653,  654,  654,  655,  655,  656,  656,  636,

      637,  634,  645,  657,  657,  658,  658,  659,  659,  660,
      660,    0,  661,  661,  650,    0,  651,  663,  663,  662,
      662,  647,    0,  653,  664,  664,    0,  648,  665,  665,
      654,    0,  666,  666,    0,  652,  667,  667,  668,  668,
      656,  669,  669,  660,  670,  670,  671,  671,    0,  672,
      672,  659,  661,  662,  658,  673,  673,  674,  674,  675,
      675,  676,  676,    0,  664,  666,  677,  677,  678,  678,
      667,  679,  679,  684,  684,  731,  665,    0,  670,  685,
      685,  686,  686,  687,  687,  732,  671,  672,  688,  688,
      689,  689,  690,  690,  691,  691,  692,  692,  678,  693,

      693,  694,  694,  731,  673,  695,  695,  749,  684,  676,
      696,  696,  685,  732,  677,  679,  697,  697,  698,  698,
      699,  699,  700,  700,  689,  687,  686,  701,  701,  690,
      688,  702,  702,  703,  703,  749,  694,  704,  704,    0,
      696,  705,  705,  706,  706,  707,  707,  693,  698,  708,
      708,  709,  709,  713,  713,  714,  714,  715,  715,  716,
      716,    0,  703,  717,  717,  699,  718,  718,  719,  719,
      720,  720,  721,  721,  722,  722,  723,  723,    0,  702,
      708,  724,  724,  725,  725,  726,  726,  715,    0,  714,
      707,  713,  704,  716,  709,  727,  727,  717,  729,  729,

        0,  728,  728,  730,  730,  733,  733,  734,  734,    0,
      722,  724,  723,  735,  735,  736,  736,  726,  737,  737,
      738,  738,  739,  739,    0,  740,  740,    0,  725,  727,
      726,  728,    0,  730,  741,  741,    0,  742,  742,  729,
      743,  743,  744,  744,    0,  735,  745,  745,  746,  746,
      747,  747,  750,  750,  738,    0,  739,  740,  733,  751,
      751,  752,  752,  736,  741,    0,  737,  742,  753,  753,
      754,  754,  755,  755,    0,  744,  756,  756,  745,  757,
      757,    0,  746,  758,  758,  759,  759,  743,  760,  760,
        0,  747,    0,  751,  761,  761,  762,  762,  763,  763,

      765,  765,    0,  766,  766,    0,  752,  767,  767,    0,
      756,  757,    0,  753,  768,  768,  769,  769,    0,  759,
      770,  770,  771,  771,  772,  772,  773,  773,  761,  774,
      774,    0,  758,  766,  775,  775,    0,  767,  776,  776,
      777,  777,  778,  778,    0,  779,  779,  780,  780,    0,
      769,  781,  781,    0,  770,  782,  782,  771,  773,  783,
      783,  774,  784,  784,  785,  785,  786,  786,  787,  787,
        0,    0,    0,    0,  776,    0,  778,    0,  777,  779,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  780,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  781,    0,    0,    0,    0,  784,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      786,  789,    0,  789,  789,  789,  789,  789,  790,  790,
      791,  791,  791,  791,  791,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  794,  794,  794,  794,  794,  794,
      794,  795,    0,  795,  795,  795,  795,  795,  796,  796,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798,  799,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[171] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "src/thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "src/thriftl.ll"

/* This is redundant with some of the flags in Makefile.am, but it works
 * when people override CXXFLAGS without being careful. The pragmas are
 * the 'right' way to do it, but don't work on old-enough GCC (in particular
 * the GCC that ship on Mac OS X 10.6.5, *counter* to what the GNU docs say)
 *
 * We should revert the Makefile.am changes once Apple ships a reasonable
 * GCC.
 */
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#endif

#ifdef _MSC_VER
//warning C4102: 'find_rule' : unreferenced label
#pragma warning(disable:4102)
//avoid isatty redefinition
#define YY_NEVER_INTERACTIVE 1
#endif

#include <cassert>
#include <string>
#include <errno.h>
#include <stdlib.h>

#ifdef _MSC_VER
#include "windows/config.h"
#endif
#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#if defined(BISON_USE_PARSER_H_EXTENSION)
#include "thrifty.h"
#else
#include "thrifty.hh"
#endif

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * We don't use it, and it fires up warnings at -Wall
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1643 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 120 "src/thriftl.ll"


#line 1831 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 789 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2589 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 122 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 124 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "src/thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "src/thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 131 "src/thriftl.ll"
{ yylval.iconst=0; return tok_int_constant; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "src/thriftl.ll"
{ yylval.iconst=1; return tok_int_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 134 "src/thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 135 "src/thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 136 "src/thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 137 "src/thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 138 "src/thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 139 "src/thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "src/thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 141 "src/thriftl.ll"
{ return tok_delphi_namespace;     }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "src/thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 143 "src/thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 "src/thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 145 "src/thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "src/thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 147 "src/thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 148 "src/thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 149 "src/thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 150 "src/thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 151 "src/thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 152 "src/thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 153 "src/thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 154 "src/thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "src/thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 156 "src/thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 157 "src/thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "src/thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "src/thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "src/thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "src/thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 162 "src/thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "src/thriftl.ll"
{
  pwarning(0, "\"slist\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_slist;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 167 "src/thriftl.ll"
{
  pwarning(0, "\"senum\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_senum;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 171 "src/thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 172 "src/thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "src/thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 174 "src/thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 175 "src/thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 176 "src/thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 177 "src/thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 178 "src/thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 179 "src/thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 180 "src/thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "src/thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "src/thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 183 "src/thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 184 "src/thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "src/thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 186 "src/thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "src/thriftl.ll"
{ return tok_reference;            }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 193 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 194 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 195 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 196 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 197 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 198 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 199 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 200 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 201 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 202 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 203 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 204 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 205 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 206 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 207 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 208 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 209 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 210 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 211 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 212 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 213 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 214 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 215 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 216 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 217 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 218 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 219 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 220 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 221 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 222 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 223 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 224 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 225 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 226 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 227 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 228 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 229 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 230 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 231 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 232 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 233 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 234 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 235 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 236 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 237 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 238 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 239 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 240 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 241 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 242 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 243 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 244 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 245 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 246 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 247 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 248 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 249 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 250 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 251 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 252 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 253 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 254 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 255 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 257 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 258 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 259 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 260 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 261 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 263 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 264 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 269 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 270 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 271 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 272 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 273 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 274 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 275 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 276 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 277 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 278 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 279 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 280 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 281 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 282 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 283 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 284 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 285 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 286 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 287 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 288 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 289 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 290 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 291 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 292 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 293 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 294 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 295 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 297 "src/thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 306 "src/thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 315 "src/thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 320 "src/thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 325 "src/thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 330 "src/thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 381 "src/thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    assert(strlen(g_doctext) >= 2);
    g_doctext[strlen(g_doctext) - 2] = ' ';
    g_doctext[strlen(g_doctext) - 1] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
    if( (g_program_doctext_candidate == NULL) && (g_program_doctext_status == INVALID)){
      g_program_doctext_candidate = strdup(g_doctext);
      g_program_doctext_lineno = g_doctext_lineno;
      g_program_doctext_status = STILL_CANDIDATE;
      pdebug("%s","program doctext set to STILL_CANDIDATE");
    }
  }
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 401 "src/thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 406 "src/thriftl.ll"
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 411 "src/thriftl.ll"
ECHO;
	YY_BREAK
#line 2889 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 789 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 789 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 788);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 411 "src/thriftl.ll"



/* vim: filetype=lex
*/

