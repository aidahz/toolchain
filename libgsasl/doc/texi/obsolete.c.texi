@subheading gsasl_client_listmech
@anchor{gsasl_client_listmech}
@deftypefun {int} {gsasl_client_listmech} (Gsasl * @var{ctx}, char * @var{out}, size_t * @var{outlen})
@var{ctx}: libgsasl handle.

@var{out}: output character array.

@var{outlen}: input maximum size of output character array, on output
contains actual length of output array.

Write SASL names, separated by space, of mechanisms supported by
the libgsasl client to the output array.  To find out how large the
output array must be, call this function with a NULL @code{out}
parameter.

@strong{Return value:} Returns @code{GSASL_OK} if successful, or error code.

@strong{Deprecated:} Use @code{gsasl_client_mechlist()} instead.
@end deftypefun

@subheading gsasl_server_listmech
@anchor{gsasl_server_listmech}
@deftypefun {int} {gsasl_server_listmech} (Gsasl * @var{ctx}, char * @var{out}, size_t * @var{outlen})
@var{ctx}: libgsasl handle.

@var{out}: output character array.

@var{outlen}: input maximum size of output character array, on output
contains actual length of output array.

Write SASL names, separated by space, of mechanisms supported by
the libgsasl server to the output array.  To find out how large the
output array must be, call this function with a NULL @code{out}
parameter.

@strong{Return value:} Returns @code{GSASL_OK} if successful, or error code.

@strong{Deprecated:} Use @code{gsasl_server_mechlist()} instead.
@end deftypefun

@subheading gsasl_client_step
@anchor{gsasl_client_step}
@deftypefun {int} {gsasl_client_step} (Gsasl_session * @var{sctx}, const char * @var{input}, size_t @var{input_len}, char * @var{output}, size_t * @var{output_len})
@var{sctx}: libgsasl client handle.

@var{input}: input byte array.

@var{input_len}: size of input byte array.

@var{output}: output byte array.

@var{output_len}: size of output byte array.

Perform one step of SASL authentication in client.  This reads data
from server (specified with input and input_len), processes it
(potentially invoking callbacks to the application), and writes
data to server (into variables output and output_len).

The contents of the output buffer is unspecified if this functions
returns anything other than @code{GSASL_NEEDS_MORE}.

@strong{Return value:} Returns @code{GSASL_OK} if authenticated terminated
successfully, @code{GSASL_NEEDS_MORE} if more data is needed, or error
code.

@strong{Deprecated:} Use @code{gsasl_step()} instead.
@end deftypefun

@subheading gsasl_server_step
@anchor{gsasl_server_step}
@deftypefun {int} {gsasl_server_step} (Gsasl_session * @var{sctx}, const char * @var{input}, size_t @var{input_len}, char * @var{output}, size_t * @var{output_len})
@var{sctx}: libgsasl server handle.

@var{input}: input byte array.

@var{input_len}: size of input byte array.

@var{output}: output byte array.

@var{output_len}: size of output byte array.

Perform one step of SASL authentication in server.  This reads data
from client (specified with input and input_len), processes it
(potentially invoking callbacks to the application), and writes
data to client (into variables output and output_len).

The contents of the output buffer is unspecified if this functions
returns anything other than @code{GSASL_NEEDS_MORE}.

@strong{Return value:} Returns @code{GSASL_OK} if authenticated terminated
successfully, @code{GSASL_NEEDS_MORE} if more data is needed, or error
code.

@strong{Deprecated:} Use @code{gsasl_step()} instead.
@end deftypefun

@subheading gsasl_client_step_base64
@anchor{gsasl_client_step_base64}
@deftypefun {int} {gsasl_client_step_base64} (Gsasl_session * @var{sctx}, const char * @var{b64input}, char * @var{b64output}, size_t @var{b64output_len})
@var{sctx}: libgsasl client handle.

@var{b64input}: input base64 encoded byte array.

@var{b64output}: output base64 encoded byte array.

@var{b64output_len}: size of output base64 encoded byte array.

This is a simple wrapper around @code{gsasl_client_step()} that base64
decodes the input and base64 encodes the output.

@strong{Return value:} See @code{gsasl_client_step()}.

@strong{Deprecated:} Use @code{gsasl_step64()} instead.
@end deftypefun

@subheading gsasl_server_step_base64
@anchor{gsasl_server_step_base64}
@deftypefun {int} {gsasl_server_step_base64} (Gsasl_session * @var{sctx}, const char * @var{b64input}, char * @var{b64output}, size_t @var{b64output_len})
@var{sctx}: libgsasl server handle.

@var{b64input}: input base64 encoded byte array.

@var{b64output}: output base64 encoded byte array.

@var{b64output_len}: size of output base64 encoded byte array.

This is a simple wrapper around @code{gsasl_server_step()} that base64
decodes the input and base64 encodes the output.

@strong{Return value:} See @code{gsasl_server_step()}.

@strong{Deprecated:} Use @code{gsasl_step64()} instead.
@end deftypefun

@subheading gsasl_client_finish
@anchor{gsasl_client_finish}
@deftypefun {void} {gsasl_client_finish} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl client handle.

Destroy a libgsasl client handle.  The handle must not be used with
other libgsasl functions after this call.

@strong{Deprecated:} Use @code{gsasl_finish()} instead.
@end deftypefun

@subheading gsasl_server_finish
@anchor{gsasl_server_finish}
@deftypefun {void} {gsasl_server_finish} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl server handle.

Destroy a libgsasl server handle.  The handle must not be used with
other libgsasl functions after this call.

@strong{Deprecated:} Use @code{gsasl_finish()} instead.
@end deftypefun

@subheading gsasl_client_ctx_get
@anchor{gsasl_client_ctx_get}
@deftypefun {Gsasl *} {gsasl_client_ctx_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl client handle

Get the libgsasl handle given a libgsasl client handle.

@strong{Return value:} Returns the libgsasl handle given a libgsasl client handle.

@strong{Deprecated:} This function is not useful with the new 0.2.0 API.
@end deftypefun

@subheading gsasl_client_application_data_set
@anchor{gsasl_client_application_data_set}
@deftypefun {void} {gsasl_client_application_data_set} (Gsasl_session * @var{sctx}, void * @var{application_data})
@var{sctx}: libgsasl client handle.

@var{application_data}: opaque pointer to application specific data.

Store application specific data in the libgsasl client handle.  The
application data can be later (for instance, inside a callback) be
retrieved by calling @code{gsasl_client_application_data_get()}.  It is
normally used by the application to maintain state between the main
program and the callback.

@strong{Deprecated:} Use @code{gsasl_callback_hook_set()} or
@code{gsasl_session_hook_set()} instead.
@end deftypefun

@subheading gsasl_client_application_data_get
@anchor{gsasl_client_application_data_get}
@deftypefun {void *} {gsasl_client_application_data_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl client handle.

Retrieve application specific data from libgsasl client handle. The
application data is set using @code{gsasl_client_application_data_set()}.
It is normally used by the application to maintain state between
the main program and the callback.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Deprecated:} Use @code{gsasl_callback_hook_get()} or
@code{gsasl_session_hook_get()} instead.
@end deftypefun

@subheading gsasl_server_ctx_get
@anchor{gsasl_server_ctx_get}
@deftypefun {Gsasl *} {gsasl_server_ctx_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl server handle

Get the libgsasl handle given a libgsasl server handle.

@strong{Return value:} Returns the libgsasl handle given a libgsasl server handle.

@strong{Deprecated:} This function is not useful with the new 0.2.0 API.
@end deftypefun

@subheading gsasl_server_application_data_set
@anchor{gsasl_server_application_data_set}
@deftypefun {void} {gsasl_server_application_data_set} (Gsasl_session * @var{sctx}, void * @var{application_data})
@var{sctx}: libgsasl server handle.

@var{application_data}: opaque pointer to application specific data.

Store application specific data in the libgsasl server handle.  The
application data can be later (for instance, inside a callback) be
retrieved by calling @code{gsasl_server_application_data_get()}.  It is
normally used by the application to maintain state between the main
program and the callback.

@strong{Deprecated:} Use @code{gsasl_callback_hook_set()} or
@code{gsasl_session_hook_set()} instead.
@end deftypefun

@subheading gsasl_server_application_data_get
@anchor{gsasl_server_application_data_get}
@deftypefun {void *} {gsasl_server_application_data_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl server handle.

Retrieve application specific data from libgsasl server handle. The
application data is set using @code{gsasl_server_application_data_set()}.
It is normally used by the application to maintain state between
the main program and the callback.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Deprecated:} Use @code{gsasl_callback_hook_get()} or
@code{gsasl_session_hook_get()} instead.
@end deftypefun

@subheading gsasl_randomize
@anchor{gsasl_randomize}
@deftypefun {int} {gsasl_randomize} (int @var{strong}, char * @var{data}, size_t @var{datalen})
@var{strong}: 0 iff operation should not block, non-0 for very strong randomness.

@var{data}: output array to be filled with random data.

@var{datalen}: size of output array.

Store cryptographically random data of given size in the provided
buffer.

@strong{Return value:} Returns @code{GSASL_OK} iff successful.

@strong{Deprecated:} Use @code{gsasl_random()} or @code{gsasl_nonce()} instead.
@end deftypefun

@subheading gsasl_ctx_get
@anchor{gsasl_ctx_get}
@deftypefun {Gsasl *} {gsasl_ctx_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl session handle

Get the libgsasl handle given a libgsasl session handle.

@strong{Return value:} Returns the libgsasl handle given a libgsasl session handle.

@strong{Deprecated:} This function is not useful with the new 0.2.0 API.
@end deftypefun

@subheading gsasl_encode_inline
@anchor{gsasl_encode_inline}
@deftypefun {int} {gsasl_encode_inline} (Gsasl_session * @var{sctx}, const char * @var{input}, size_t @var{input_len}, char * @var{output}, size_t * @var{output_len})
@var{sctx}: libgsasl session handle.

@var{input}: input byte array.

@var{input_len}: size of input byte array.

@var{output}: output byte array.

@var{output_len}: size of output byte array.

Encode data according to negotiated SASL mechanism.  This might mean
that data is integrity or privacy protected.

@strong{Return value:} Returns @code{GSASL_OK} if encoding was successful,
otherwise an error code.

@strong{Deprecated:} Use @code{gsasl_encode()} instead.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_decode_inline
@anchor{gsasl_decode_inline}
@deftypefun {int} {gsasl_decode_inline} (Gsasl_session * @var{sctx}, const char * @var{input}, size_t @var{input_len}, char * @var{output}, size_t * @var{output_len})
@var{sctx}: libgsasl session handle.

@var{input}: input byte array.

@var{input_len}: size of input byte array.

@var{output}: output byte array.

@var{output_len}: size of output byte array.

Decode data according to negotiated SASL mechanism.  This might mean
that data is integrity or privacy protected.

@strong{Return value:} Returns @code{GSASL_OK} if encoding was successful,
otherwise an error code.

@strong{Deprecated:} Use @code{gsasl_decode()} instead.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_application_data_set
@anchor{gsasl_application_data_set}
@deftypefun {void} {gsasl_application_data_set} (Gsasl * @var{ctx}, void * @var{appdata})
@var{ctx}: libgsasl handle.

@var{appdata}: opaque pointer to application specific data.

Store application specific data in the libgsasl handle.  The
application data can be later (for instance, inside a callback) be
retrieved by calling @code{gsasl_application_data_get()}.  It is normally
used by the application to maintain state between the main program
and the callback.

@strong{Deprecated:} Use @code{gsasl_callback_hook_set()} instead.
@end deftypefun

@subheading gsasl_application_data_get
@anchor{gsasl_application_data_get}
@deftypefun {void *} {gsasl_application_data_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Retrieve application specific data from libgsasl handle. The
application data is set using @code{gsasl_application_data_set()}.  It is
normally used by the application to maintain state between the main
program and the callback.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Deprecated:} Use @code{gsasl_callback_hook_get()} instead.
@end deftypefun

@subheading gsasl_appinfo_set
@anchor{gsasl_appinfo_set}
@deftypefun {void} {gsasl_appinfo_set} (Gsasl_session * @var{sctx}, void * @var{appdata})
@var{sctx}: libgsasl session handle.

@var{appdata}: opaque pointer to application specific data.

Store application specific data in the libgsasl session handle.
The application data can be later (for instance, inside a callback)
be retrieved by calling @code{gsasl_appinfo_get()}.  It is normally used
by the application to maintain state between the main program and
the callback.

@strong{Deprecated:} Use @code{gsasl_callback_hook_set()} instead.
@end deftypefun

@subheading gsasl_appinfo_get
@anchor{gsasl_appinfo_get}
@deftypefun {void *} {gsasl_appinfo_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl session handle.

Retrieve application specific data from libgsasl session
handle. The application data is set using @code{gsasl_appinfo_set()}.  It
is normally used by the application to maintain state between the
main program and the callback.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Deprecated:} Use @code{gsasl_callback_hook_get()} instead.
@end deftypefun

@subheading gsasl_server_suggest_mechanism
@anchor{gsasl_server_suggest_mechanism}
@deftypefun {const char *} {gsasl_server_suggest_mechanism} (Gsasl * @var{ctx}, const char * @var{mechlist})
@var{ctx}: libgsasl handle.

@var{mechlist}: input character array with SASL mechanism names,
separated by invalid characters (e.g. SPC).

Get name of "best" SASL mechanism supported by the libgsasl server
which is present in the input string.

@strong{Return value:} Returns name of "best" SASL mechanism supported by
the libgsasl server which is present in the input string.

@strong{Deprecated:} This function was never useful, since it is the client
that chose which mechanism to use.
@end deftypefun

@subheading gsasl_client_callback_authentication_id_set
@anchor{gsasl_client_callback_authentication_id_set}
@deftypefun {void} {gsasl_client_callback_authentication_id_set} (Gsasl * @var{ctx}, Gsasl_client_callback_authentication_id           @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the
authentication identity.  The function can be later retrieved using
@code{gsasl_client_callback_authentication_id_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_authentication_id_get
@anchor{gsasl_client_callback_authentication_id_get}
@deftypefun {Gsasl_client_callback_authentication_id} {gsasl_client_callback_authentication_id_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_authentication_id_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_authentication_id_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_authorization_id_set
@anchor{gsasl_client_callback_authorization_id_set}
@deftypefun {void} {gsasl_client_callback_authorization_id_set} (Gsasl * @var{ctx}, Gsasl_client_callback_authorization_id          @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the
authorization identity.  The function can be later retrieved using
@code{gsasl_client_callback_authorization_id_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_authorization_id_get
@anchor{gsasl_client_callback_authorization_id_get}
@deftypefun {Gsasl_client_callback_authorization_id} {gsasl_client_callback_authorization_id_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_authorization_id_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_authorization_id_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_password_set
@anchor{gsasl_client_callback_password_set}
@deftypefun {void} {gsasl_client_callback_password_set} (Gsasl * @var{ctx}, Gsasl_client_callback_password @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the
password.  The function can be later retrieved using
@code{gsasl_client_callback_password_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_password_get
@anchor{gsasl_client_callback_password_get}
@deftypefun {Gsasl_client_callback_password} {gsasl_client_callback_password_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_password_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_password_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_passcode_set
@anchor{gsasl_client_callback_passcode_set}
@deftypefun {void} {gsasl_client_callback_passcode_set} (Gsasl * @var{ctx}, Gsasl_client_callback_passcode @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the
passcode.  The function can be later retrieved using
@code{gsasl_client_callback_passcode_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_passcode_get
@anchor{gsasl_client_callback_passcode_get}
@deftypefun {Gsasl_client_callback_passcode} {gsasl_client_callback_passcode_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_passcode_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_passcode_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_pin_set
@anchor{gsasl_client_callback_pin_set}
@deftypefun {void} {gsasl_client_callback_pin_set} (Gsasl * @var{ctx}, Gsasl_client_callback_pin @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to chose a new
pin, possibly suggested by the server, for the SECURID mechanism.
This is not normally invoked, but only when the server requests it.
The function can be later retrieved using
@code{gsasl_client_callback_pin_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_pin_get
@anchor{gsasl_client_callback_pin_get}
@deftypefun {Gsasl_client_callback_pin} {gsasl_client_callback_pin_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_pin_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_pin_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_service_set
@anchor{gsasl_client_callback_service_set}
@deftypefun {void} {gsasl_client_callback_service_set} (Gsasl * @var{ctx}, Gsasl_client_callback_service @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the name
of the service.  The service buffer should be a registered GSSAPI
host-based service name, hostname the name of the server.
Servicename is used by DIGEST-MD5 and should be the name of generic
server in case of a replicated service. The function can be later
retrieved using @code{gsasl_client_callback_service_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_service_get
@anchor{gsasl_client_callback_service_get}
@deftypefun {Gsasl_client_callback_service} {gsasl_client_callback_service_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_service_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_service_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_anonymous_set
@anchor{gsasl_client_callback_anonymous_set}
@deftypefun {void} {gsasl_client_callback_anonymous_set} (Gsasl * @var{ctx}, Gsasl_client_callback_anonymous @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to set the
anonymous token, which usually is the users email address.  The
function can be later retrieved using
@code{gsasl_client_callback_anonymous_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_anonymous_get
@anchor{gsasl_client_callback_anonymous_get}
@deftypefun {Gsasl_client_callback_anonymous} {gsasl_client_callback_anonymous_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_anonymous_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_anonymous_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_qop_set
@anchor{gsasl_client_callback_qop_set}
@deftypefun {void} {gsasl_client_callback_qop_set} (Gsasl * @var{ctx}, Gsasl_client_callback_qop @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to determine the
qop to use after looking at what the server offered.  The function
can be later retrieved using @code{gsasl_client_callback_qop_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_qop_get
@anchor{gsasl_client_callback_qop_get}
@deftypefun {Gsasl_client_callback_qop} {gsasl_client_callback_qop_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_qop_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_qop_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_maxbuf_set
@anchor{gsasl_client_callback_maxbuf_set}
@deftypefun {void} {gsasl_client_callback_maxbuf_set} (Gsasl * @var{ctx}, Gsasl_client_callback_maxbuf @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to inform the
server of the largest buffer the client is able to receive when
using the DIGEST-MD5 "auth-int" or "auth-conf" Quality of
Protection (qop). If this directive is missing, the default value
65536 will be assumed.  The function can be later retrieved using
@code{gsasl_client_callback_maxbuf_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_maxbuf_get
@anchor{gsasl_client_callback_maxbuf_get}
@deftypefun {Gsasl_client_callback_maxbuf} {gsasl_client_callback_maxbuf_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_maxbuf_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_maxbuf_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_realm_set
@anchor{gsasl_client_callback_realm_set}
@deftypefun {void} {gsasl_client_callback_realm_set} (Gsasl * @var{ctx}, Gsasl_client_callback_realm @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the client to know which
realm it belongs to.  The realm is used by the server to determine
which username and password to use.  The function can be later
retrieved using @code{gsasl_client_callback_realm_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_client_callback_realm_get
@anchor{gsasl_client_callback_realm_get}
@deftypefun {Gsasl_client_callback_realm} {gsasl_client_callback_realm_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_client_callback_realm_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_client_callback_realm_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_validate_set
@anchor{gsasl_server_callback_validate_set}
@deftypefun {void} {gsasl_server_callback_validate_set} (Gsasl * @var{ctx}, Gsasl_server_callback_validate @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for deciding if
user is authenticated using authentication identity, authorization
identity and password.  The function can be later retrieved using
@code{gsasl_server_callback_validate_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_validate_get
@anchor{gsasl_server_callback_validate_get}
@deftypefun {Gsasl_server_callback_validate} {gsasl_server_callback_validate_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_validate_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_validate_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_retrieve_set
@anchor{gsasl_server_callback_retrieve_set}
@deftypefun {void} {gsasl_server_callback_retrieve_set} (Gsasl * @var{ctx}, Gsasl_server_callback_retrieve @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for deciding if
user is authenticated using authentication identity, authorization
identity and password.  The function can be later retrieved using
@code{gsasl_server_callback_retrieve_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_retrieve_get
@anchor{gsasl_server_callback_retrieve_get}
@deftypefun {Gsasl_server_callback_retrieve} {gsasl_server_callback_retrieve_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_retrieve_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_retrieve_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_cram_md5_set
@anchor{gsasl_server_callback_cram_md5_set}
@deftypefun {void} {gsasl_server_callback_cram_md5_set} (Gsasl * @var{ctx}, Gsasl_server_callback_cram_md5 @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for deciding if
user is authenticated using CRAM-MD5 challenge and response.  The
function can be later retrieved using
@code{gsasl_server_callback_cram_md5_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_cram_md5_get
@anchor{gsasl_server_callback_cram_md5_get}
@deftypefun {Gsasl_server_callback_cram_md5} {gsasl_server_callback_cram_md5_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_cram_md5_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_cram_md5_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_digest_md5_set
@anchor{gsasl_server_callback_digest_md5_set}
@deftypefun {void} {gsasl_server_callback_digest_md5_set} (Gsasl * @var{ctx}, Gsasl_server_callback_digest_md5 @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for retrieving
the secret hash of the username, realm and password for use in the
DIGEST-MD5 mechanism.  The function can be later retrieved using
@code{gsasl_server_callback_digest_md5_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_digest_md5_get
@anchor{gsasl_server_callback_digest_md5_get}
@deftypefun {Gsasl_server_callback_digest_md5} {gsasl_server_callback_digest_md5_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_digest_md5_set()}.

@strong{Return value:} Return the callback earlier set by calling
@code{gsasl_server_callback_digest_md5_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_external_set
@anchor{gsasl_server_callback_external_set}
@deftypefun {void} {gsasl_server_callback_external_set} (Gsasl * @var{ctx}, Gsasl_server_callback_external @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for deciding if
user is authenticated out of band.  The function can be later
retrieved using @code{gsasl_server_callback_external_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_external_get
@anchor{gsasl_server_callback_external_get}
@deftypefun {Gsasl_server_callback_external} {gsasl_server_callback_external_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_external_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_external_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_anonymous_set
@anchor{gsasl_server_callback_anonymous_set}
@deftypefun {void} {gsasl_server_callback_anonymous_set} (Gsasl * @var{ctx}, Gsasl_server_callback_anonymous @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for deciding if
user is permitted anonymous access.  The function can be later
retrieved using @code{gsasl_server_callback_anonymous_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_anonymous_get
@anchor{gsasl_server_callback_anonymous_get}
@deftypefun {Gsasl_server_callback_anonymous} {gsasl_server_callback_anonymous_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_anonymous_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_anonymous_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_realm_set
@anchor{gsasl_server_callback_realm_set}
@deftypefun {void} {gsasl_server_callback_realm_set} (Gsasl * @var{ctx}, Gsasl_server_callback_realm @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server to know which
realm it serves.  The realm is used by the user to determine which
username and password to use.  The function can be later retrieved
using @code{gsasl_server_callback_realm_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_realm_get
@anchor{gsasl_server_callback_realm_get}
@deftypefun {Gsasl_server_callback_realm} {gsasl_server_callback_realm_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_realm_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_realm_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_qop_set
@anchor{gsasl_server_callback_qop_set}
@deftypefun {void} {gsasl_server_callback_qop_set} (Gsasl * @var{ctx}, Gsasl_server_callback_qop @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server to know which
quality of protection it accepts.  The quality of protection
eventually used is selected by the client though.  It is currently
used by the DIGEST-MD5 mechanism. The function can be later
retrieved using @code{gsasl_server_callback_qop_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_qop_get
@anchor{gsasl_server_callback_qop_get}
@deftypefun {Gsasl_server_callback_qop} {gsasl_server_callback_qop_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_qop_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_qop_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_maxbuf_set
@anchor{gsasl_server_callback_maxbuf_set}
@deftypefun {void} {gsasl_server_callback_maxbuf_set} (Gsasl * @var{ctx}, Gsasl_server_callback_maxbuf @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server to inform the
client of the largest buffer the server is able to receive when
using the DIGEST-MD5 "auth-int" or "auth-conf" Quality of
Protection (qop). If this directive is missing, the default value
65536 will be assumed.  The function can be later retrieved using
@code{gsasl_server_callback_maxbuf_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_maxbuf_get
@anchor{gsasl_server_callback_maxbuf_get}
@deftypefun {Gsasl_server_callback_maxbuf} {gsasl_server_callback_maxbuf_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_maxbuf_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_maxbuf_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_cipher_set
@anchor{gsasl_server_callback_cipher_set}
@deftypefun {void} {gsasl_server_callback_cipher_set} (Gsasl * @var{ctx}, Gsasl_server_callback_cipher @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server to inform the
client of the cipher suites supported.  The DES and 3DES ciphers
must be supported for interoperability.  It is currently used by
the DIGEST-MD5 mechanism.  The function can be later retrieved
using @code{gsasl_server_callback_cipher_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_cipher_get
@anchor{gsasl_server_callback_cipher_get}
@deftypefun {Gsasl_server_callback_cipher} {gsasl_server_callback_cipher_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_cipher_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_cipher_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_securid_set
@anchor{gsasl_server_callback_securid_set}
@deftypefun {void} {gsasl_server_callback_securid_set} (Gsasl * @var{ctx}, Gsasl_server_callback_securid @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for validating a
user via the SECURID mechanism.  The function should return
GSASL_OK if user authenticated successfully,
GSASL_SECURID_SERVER_NEED_ADDITIONAL_PASSCODE if it wants another
passcode, GSASL_SECURID_SERVER_NEED_NEW_PIN if it wants a PIN
change, or an error.  When (and only when)
GSASL_SECURID_SERVER_NEED_NEW_PIN is returned, suggestpin can be
populated with a PIN code the server suggests, and suggestpinlen
set to the length of the PIN.  The function can be later retrieved
using @code{gsasl_server_callback_securid_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_securid_get
@anchor{gsasl_server_callback_securid_get}
@deftypefun {Gsasl_server_callback_securid} {gsasl_server_callback_securid_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_securid_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_securid_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_gssapi_set
@anchor{gsasl_server_callback_gssapi_set}
@deftypefun {void} {gsasl_server_callback_gssapi_set} (Gsasl * @var{ctx}, Gsasl_server_callback_gssapi @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server for checking if
a GSSAPI user is authorized for username (by, e.g., calling
krb5_kuserok).  The function should return GSASL_OK if the user
should be permitted access, or an error code such as
GSASL_AUTHENTICATION_ERROR on failure.  The function can be later
retrieved using @code{gsasl_server_callback_gssapi_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_gssapi_get
@anchor{gsasl_server_callback_gssapi_get}
@deftypefun {Gsasl_server_callback_gssapi} {gsasl_server_callback_gssapi_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_gssapi_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_gssapi_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_service_set
@anchor{gsasl_server_callback_service_set}
@deftypefun {void} {gsasl_server_callback_service_set} (Gsasl * @var{ctx}, Gsasl_server_callback_service @var{cb})
@var{ctx}: libgsasl handle.

@var{cb}: callback function

Specify the callback function to use in the server to set the name
of the service.  The service buffer should be a registered GSSAPI
host-based service name, hostname the name of the server.  The
function can be later retrieved using
@code{gsasl_server_callback_service_get()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_server_callback_service_get
@anchor{gsasl_server_callback_service_get}
@deftypefun {Gsasl_server_callback_service} {gsasl_server_callback_service_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Get the callback earlier set by calling
@code{gsasl_server_callback_service_set()}.

@strong{Return value:} Returns the callback earlier set by calling
@code{gsasl_server_callback_service_set()}.

@strong{Deprecated:} This function is part of the old callback interface.
The new interface uses @code{gsasl_callback_set()} to set the application
callback, and uses @code{gsasl_callback()} or @code{gsasl_property_get()} to
invoke the callback for certain properties.
@end deftypefun

@subheading gsasl_stringprep_nfkc
@anchor{gsasl_stringprep_nfkc}
@deftypefun {char *} {gsasl_stringprep_nfkc} (const char * @var{in}, ssize_t @var{len})
@var{in}: a UTF-8 encoded string.

@var{len}: length of @code{str}, in bytes, or -1 if @code{str} is nul-terminated.

Converts a string into canonical form, standardizing such issues as
whether a character with an accent is represented as a base
character and combining accent or as a single precomposed
character.

The normalization mode is NFKC (ALL COMPOSE).  It standardizes
differences that do not affect the text content, such as the
above-mentioned accent representation. It standardizes the
"compatibility" characters in Unicode, such as SUPERSCRIPT THREE to
the standard forms (in this case DIGIT THREE). Formatting
information may be lost but for most text operations such
characters should be considered the same. It returns a result with
composed forms rather than a maximally decomposed form.

@strong{Return value:} Return a newly allocated string, that is the NFKC
normalized form of @code{str}, or NULL on error.

@strong{Deprecated:} No replacement functionality in GNU SASL, use GNU
Libidn instead.  Note that in SASL, you most likely want to use
SASLprep and not bare NFKC, see @code{gsasl_saslprep()}.
@end deftypefun

@subheading gsasl_stringprep_saslprep
@anchor{gsasl_stringprep_saslprep}
@deftypefun {char *} {gsasl_stringprep_saslprep} (const char * @var{in}, int * @var{stringprep_rc})
@var{in}: input ASCII or UTF-8 string with data to prepare according to SASLprep.

@var{stringprep_rc}: pointer to output variable with stringprep error code,
or NULL to indicate that you don't care about it.

Process a Unicode string for comparison, according to the
"SASLprep" stringprep profile.  This function is intended to be
used by Simple Authentication and Security Layer (SASL) mechanisms
(such as PLAIN, CRAM-MD5, and DIGEST-MD5) as well as other
protocols exchanging user names and/or passwords.

@strong{Return value:} Return a newly allocated string that is the
"SASLprep" processed form of the input string, or NULL on error,
in which case @code{stringprep_rc} contain the stringprep library error
code.

@strong{Deprecated:} Use @code{gsasl_saslprep()} instead.
@end deftypefun

@subheading gsasl_stringprep_trace
@anchor{gsasl_stringprep_trace}
@deftypefun {char *} {gsasl_stringprep_trace} (const char * @var{in}, int * @var{stringprep_rc})
@var{in}: input ASCII or UTF-8 string with data to prepare according to "trace".

@var{stringprep_rc}: pointer to output variable with stringprep error code,
or NULL to indicate that you don't care about it.

Process a Unicode string for use as trace information, according to
the "trace" stringprep profile.  The profile is designed for use
with the SASL ANONYMOUS Mechanism.

@strong{Return value:} Return a newly allocated string that is the "trace"
processed form of the input string, or NULL on error, in which
case @code{stringprep_rc} contain the stringprep library error code.

@strong{Deprecated:} No replacement functionality in GNU SASL, use GNU
Libidn instead.
@end deftypefun

@subheading gsasl_md5pwd_get_password
@anchor{gsasl_md5pwd_get_password}
@deftypefun {int} {gsasl_md5pwd_get_password} (const char * @var{filename}, const char * @var{username}, char * @var{key}, size_t * @var{keylen})
@var{filename}: filename of file containing passwords.

@var{username}: username string.

@var{key}: output character array.

@var{keylen}: input maximum size of output character array, on output
contains actual length of output array.

Retrieve password for user from specified file.  To find out how
large the output array must be, call this function with out=NULL.

The file should be on the UoW "MD5 Based Authentication" format,
which means it is in text format with comments denoted by # first
on the line, with user entries looking as "usernameTABpassword".
This function removes CR and LF at the end of lines before
processing.  TAB, CR, and LF denote ASCII values 9, 13, and 10,
respectively.

@strong{Return value:} Return GSASL_OK if output buffer contains the
password, GSASL_AUTHENTICATION_ERROR if the user could not be
found, or other error code.

@strong{Deprecated:} Use @code{gsasl_simple_getpass()} instead.
@end deftypefun

@subheading gsasl_base64_encode
@anchor{gsasl_base64_encode}
@deftypefun {int} {gsasl_base64_encode} (char const * @var{src}, size_t @var{srclength}, char * @var{target}, size_t @var{targsize})
@var{src}: input byte array

@var{srclength}: size of input byte array

@var{target}: output byte array

@var{targsize}: size of output byte array

Encode data as base64.  Converts characters, three at a time,
starting at src into four base64 characters in the target area
until the entire input buffer is encoded.

@strong{Return value:} Returns the number of data bytes stored at the
target, or -1 on error.

@strong{Deprecated:} Use @code{gsasl_base64_to()} instead.
@end deftypefun

@subheading gsasl_base64_decode
@anchor{gsasl_base64_decode}
@deftypefun {int} {gsasl_base64_decode} (char const * @var{src}, char * @var{target}, size_t @var{targsize})
@var{src}: input byte array

@var{target}: output byte array

@var{targsize}: size of output byte array

Decode Base64 data.  Skips all whitespace anywhere.  Converts
characters, four at a time, starting at (or after) src from Base64
numbers into three 8 bit bytes in the target area.

@strong{Return value:} Returns the number of data bytes stored at the
target, or -1 on error.

@strong{Deprecated:} Use @code{gsasl_base64_from()} instead.
@end deftypefun

