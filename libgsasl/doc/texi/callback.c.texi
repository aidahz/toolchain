@subheading gsasl_callback_set
@anchor{gsasl_callback_set}
@deftypefun {void} {gsasl_callback_set} (Gsasl * @var{ctx}, Gsasl_callback_function @var{cb})
@var{ctx}: handle received from @code{gsasl_init()}.

@var{cb}: pointer to function implemented by application.

Store the pointer to the application provided callback in the
library handle.  The callback will be used, via @code{gsasl_callback()},
by mechanisms to discover various parameters (such as username and
passwords).  The callback function will be called with a
Gsasl_property value indicating the requested behaviour.  For
example, for @code{GSASL_ANONYMOUS_TOKEN}, the function is expected to
invoke gsasl_property_set(@code{CTX}, @code{GSASL_ANONYMOUS_TOKEN}, "token")
where "token" is the anonymous token the application wishes the
SASL mechanism to use.  See the manual for the meaning of all
parameters.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_callback
@anchor{gsasl_callback}
@deftypefun {int} {gsasl_callback} (Gsasl * @var{ctx}, Gsasl_session * @var{sctx}, Gsasl_property @var{prop})
@var{ctx}: handle received from @code{gsasl_init()}, may be NULL to derive it
from @code{sctx}.

@var{sctx}: session handle.

@var{prop}: enumerated value of Gsasl_property type.

Invoke the application callback.  The @code{prop} value indicate what the
callback is expected to do.  For example, for
@code{GSASL_ANONYMOUS_TOKEN}, the function is expected to invoke
gsasl_property_set(@code{SCTX}, @code{GSASL_ANONYMOUS_TOKEN}, "token") where
"token" is the anonymous token the application wishes the SASL
mechanism to use.  See the manual for the meaning of all
parameters.

Note that if no callback has been set by the application, but the
obsolete callback interface has been used, this function will
translate the old callback interface into the new.  This interface
should be sufficient to invoke all callbacks, both new and old.

@strong{Return value:} Returns whatever the application callback returns, or
@code{GSASL_NO_CALLBACK} if no application was known.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_callback_hook_set
@anchor{gsasl_callback_hook_set}
@deftypefun {void} {gsasl_callback_hook_set} (Gsasl * @var{ctx}, void * @var{hook})
@var{ctx}: libgsasl handle.

@var{hook}: opaque pointer to application specific data.

Store application specific data in the libgsasl handle.

The application data can be later (for instance, inside a callback)
be retrieved by calling @code{gsasl_callback_hook_get()}.  This is
normally used by the application to maintain a global state between
the main program and callbacks.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_callback_hook_get
@anchor{gsasl_callback_hook_get}
@deftypefun {void *} {gsasl_callback_hook_get} (Gsasl * @var{ctx})
@var{ctx}: libgsasl handle.

Retrieve application specific data from libgsasl handle.

The application data is set using @code{gsasl_callback_hook_set()}.  This
is normally used by the application to maintain a global state
between the main program and callbacks.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Since:} 0.2.0
@end deftypefun

@subheading gsasl_session_hook_set
@anchor{gsasl_session_hook_set}
@deftypefun {void} {gsasl_session_hook_set} (Gsasl_session * @var{sctx}, void * @var{hook})
@var{sctx}: libgsasl session handle.

@var{hook}: opaque pointer to application specific data.

Store application specific data in the libgsasl session handle.

The application data can be later (for instance, inside a callback)
be retrieved by calling @code{gsasl_session_hook_get()}.  This is normally
used by the application to maintain a per-session state between the
main program and callbacks.

@strong{Since:} 0.2.14
@end deftypefun

@subheading gsasl_session_hook_get
@anchor{gsasl_session_hook_get}
@deftypefun {void *} {gsasl_session_hook_get} (Gsasl_session * @var{sctx})
@var{sctx}: libgsasl session handle.

Retrieve application specific data from libgsasl session handle.

The application data is set using @code{gsasl_callback_hook_set()}.  This
is normally used by the application to maintain a per-session state
between the main program and callbacks.

@strong{Return value:} Returns the application specific data, or NULL.

@strong{Since:} 0.2.14
@end deftypefun

